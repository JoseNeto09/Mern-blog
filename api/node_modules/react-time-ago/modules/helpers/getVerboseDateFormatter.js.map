{"version":3,"file":"getVerboseDateFormatter.js","names":["memoize","intlDateTimeFormatSupported","intlDateTimeFormatSupportedLocale","Cache","cache","INTL_DATE_TIME_FORMAT_SUPPORTED","FALLBACK_VERBOSE_DATE_FORMATTER","date","toString","getVerboseDateFormatter","locales","format","locale","resolveLocale","formatFingerprint","JSON","stringify","formatter","get","String","put","Intl","DateTimeFormat","resolvedLocales","localesFingerprint"],"sources":["../../source/helpers/getVerboseDateFormatter.js"],"sourcesContent":["import memoize from 'memoize-one'\r\n\r\nimport {\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n} from './locale.js'\r\n\r\nimport Cache from './cache.js'\r\n\r\nconst cache = new Cache()\r\n\r\nconst INTL_DATE_TIME_FORMAT_SUPPORTED = intlDateTimeFormatSupported()\r\nconst FALLBACK_VERBOSE_DATE_FORMATTER = date => date.toString()\r\n\r\n/**\r\n * Returns a verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nfunction getVerboseDateFormatter(locales, format) {\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!INTL_DATE_TIME_FORMAT_SUPPORTED) {\r\n\t\treturn FALLBACK_VERBOSE_DATE_FORMATTER\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = resolveLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined`, hence the `String(locale)` conversion)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}\r\n\r\n// Even though `getVerboseDateFormatter()` function is called inside a\r\n// `useMemo()` hook, it's still invoked every time for different \r\n// `<ReactTimeAgo/>` elements on a page. There could be a lot of such\r\n// `<ReactTimeAgo/>` elements on a page. And `useMemo()` wouldn't speed up\r\n// the initial render. To work around that, simple argument-based memoization\r\n// is used.\r\nexport default memoize(getVerboseDateFormatter)\r\n\r\n// Caching locale resolving for optimizing pages \r\n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\r\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\r\n// For example, it could be 25 milliseconds for 200 calls.\r\nconst resolvedLocales = {}\r\n\r\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\r\nfunction resolveLocale(locales) {\r\n\tconst localesFingerprint = locales.toString()\r\n\tif (resolvedLocales[localesFingerprint]) {\r\n\t\treturn resolvedLocales[localesFingerprint] \r\n\t}\r\n\treturn resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales)\r\n}"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,aAApB;AAEA,SACCC,2BADD,EAECC,iCAFD,QAGO,aAHP;AAKA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd;AAEA,IAAME,+BAA+B,GAAGJ,2BAA2B,EAAnE;;AACA,IAAMK,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAAC,IAAI;EAAA,OAAIA,IAAI,CAACC,QAAL,EAAJ;AAAA,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCC,OAAjC,EAA0CC,MAA1C,EAAkD;EACjD;EACA;EACA,IAAI,CAACN,+BAAL,EAAsC;IACrC,OAAOC,+BAAP;EACA,CALgD,CAOjD;EACA;;;EACA,IAAMM,MAAM,GAAGC,aAAa,CAACH,OAAD,CAA5B,CATiD,CAWjD;EACA;EACA;EACA;EACA;EACA;;EACA,IAAMI,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAA1B,CAjBiD,CAmBjD;EACA;;EACA,IAAMM,SAAS,GAAGb,KAAK,CAACc,GAAN,CAAUC,MAAM,CAACP,MAAD,CAAhB,EAA0BE,iBAA1B,KACjBV,KAAK,CAACgB,GAAN,CAAUD,MAAM,CAACP,MAAD,CAAhB,EAA0BE,iBAA1B,EAA6C,IAAIO,IAAI,CAACC,cAAT,CAAwBV,MAAxB,EAAgCD,MAAhC,CAA7C,CADD,CArBiD,CAwBjD;;EACA,OAAO,UAAAJ,IAAI;IAAA,OAAIU,SAAS,CAACN,MAAV,CAAiBJ,IAAjB,CAAJ;EAAA,CAAX;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeP,OAAO,CAACS,uBAAD,CAAtB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMc,eAAe,GAAG,EAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASV,aAAT,CAAuBH,OAAvB,EAAgC;EAC/B,IAAMc,kBAAkB,GAAGd,OAAO,CAACF,QAAR,EAA3B;;EACA,IAAIe,eAAe,CAACC,kBAAD,CAAnB,EAAyC;IACxC,OAAOD,eAAe,CAACC,kBAAD,CAAtB;EACA;;EACD,OAAOD,eAAe,CAACC,kBAAD,CAAf,GAAsCtB,iCAAiC,CAACQ,OAAD,CAA9E;AACA"}